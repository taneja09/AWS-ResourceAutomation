{
    "AWSTemplateFormatVersion":"2010-09-09",
    "Description":"Launch EC2 - CSYE 6225 Spring 2020",
    "Parameters":{
      "VPCName":{
          "Type":"String"
      },
      "VPCCidrBlock":{
          "Type":"String",
          "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      },
      "PubSubnetCidrBlock1":{
          "Type":"String",
          "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      },
      "PubSubnetCidrBlock2":{
          "Type":"String",
          "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      },
      "PubSubnetCidrBlock3":{
          "Type":"String",
          "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
      },
      "PubSubnetCidrBlock4":{
         "Type":"String",
         "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
     },
      "EC2InstanceVol":{
         "Type":"String"
      },
      "RDSInstanceVol":{
         "Type":"String"
      },
      "RDSPublicAccessibility":{
         "Type":"String"
      },
      "DBUsername":{
         "Type":"String"
      },
      "DBPassword":{
         "Type":"String"
      },
      "RDSDBName":{
         "Type":"String"
      },
      "DBInstanceId":{
         "Type":"String"
      },
      "EC2IamRole":{
         "Type":"String"
      },
      "EC2IamPolicy":{
         "Type":"String"
      },
      "AMIImage":{
         "Type":"String"
      },
      "CDEC2ReadS3":{
         "Type":"String"
      },
      "CCIUploadS3":{
         "Type":"String"
      },
      "CCICodeDeploy":{
         "Type":"String"
      },
      "AWSAccountID":{
         "Type":"String"
      },
      "CodeDeployBucket":{
         "Type":"String"
      },
      "EC2CodeDeployRole":{
         "Type":"String"
      },
      "ServiceCodeDeployRole":{
         "Type":"String"
      },
      "CodeDeployAppName":{
         "Type":"String"
      },
      "CodeDeployGroupName":{
         "Type":"String"
      },
      "LaunchconfigName":{
         "Type":"String"
      },
      "HostedZoneIdR53":{
         "Type":"String"
      },
      "FinalDNSName":{
         "Type":"String"
      }
    },
    "Resources":{
       "VPC":{
          "Type":"AWS::EC2::VPC",
          "Properties":{
             "CidrBlock":{
                "Ref":"VPCCidrBlock"
             },
             "EnableDnsHostnames":true,
             "EnableDnsSupport":true,
             "InstanceTenancy":"default",
             "Tags":[
                {
                   "Key":"Name",
                   "Value":{
                      "Ref":"VPCName"
                   }
                }
             ]
          }
       },
       "InternetGateway":{
          "Type":"AWS::EC2::InternetGateway"
       },
       "VPCGatewayAttachment":{
          "Type":"AWS::EC2::VPCGatewayAttachment",
          "Properties":{
             "VpcId":{
                "Ref":"VPC"
             },
             "InternetGatewayId":{
                "Ref":"InternetGateway"
             }
          }
       },
       "PublicSubnetA":{
          "Type":"AWS::EC2::Subnet",
          "Properties":{
             "AvailabilityZone":{
                "Fn::Select":[
                   0,
                   {
                      "Fn::GetAZs":{
                         "Ref":"AWS::Region"
                      }
                   }
                ]
             },
             "VpcId":{
                "Ref":"VPC"
             },
             "CidrBlock":{
                "Ref":"PubSubnetCidrBlock1"
             },
             "MapPublicIpOnLaunch":true
          }
       },
       "PrivateSubnetB":{
          "Type":"AWS::EC2::Subnet",
          "Properties":{
             "AvailabilityZone":{
                "Fn::Select":[
                   1,
                   {
                      "Fn::GetAZs":{
                         "Ref":"AWS::Region"
                      }
                   }
                ]
             },
             "VpcId":{
                "Ref":"VPC"
             },
             "CidrBlock":{
                "Ref":"PubSubnetCidrBlock2"
             },
             "MapPublicIpOnLaunch":false
          }
       },
       "PrivateSubnetC":{
          "Type":"AWS::EC2::Subnet",
          "Properties":{
             "AvailabilityZone":{
                "Fn::Select":[
                   2,
                   {
                      "Fn::GetAZs":{
                         "Ref":"AWS::Region"
                      }
                   }
                ]
             },
             "VpcId":{
                "Ref":"VPC"
             },
             "CidrBlock":{
                "Ref":"PubSubnetCidrBlock3"
             },
             "MapPublicIpOnLaunch":false
          }
       },
       "PublicSubnetD":{
         "Type":"AWS::EC2::Subnet",
         "Properties":{
            "AvailabilityZone":{
               "Fn::Select":[
                  3,
                  {
                     "Fn::GetAZs":{
                        "Ref":"AWS::Region"
                     }
                  }
               ]
            },
            "VpcId":{
               "Ref":"VPC"
            },
            "CidrBlock":{
               "Ref":"PubSubnetCidrBlock4"
            },
            "MapPublicIpOnLaunch":true
         }
      },
       "RouteTable":{
          "Type":"AWS::EC2::RouteTable",
          "Properties":{
             "VpcId":{
                "Ref":"VPC"
             }
          }
       },
       "PrivateRouteTable":{
          "Type":"AWS::EC2::RouteTable",
          "Properties":{
             "VpcId":{
                "Ref":"VPC"
             }
          }
       },
       "InternetRoute":{
          "Type":"AWS::EC2::Route",
          "DependsOn":"VPCGatewayAttachment",
          "Properties":{
             "DestinationCidrBlock":"0.0.0.0/0",
             "GatewayId":{
                "Ref":"InternetGateway"
             },
             "RouteTableId":{
                "Ref":"RouteTable"
             }
          }
       },
       "SubnetARouteTableAssociation":{
          "Type":"AWS::EC2::SubnetRouteTableAssociation",
          "Properties":{
             "RouteTableId":{
                "Ref":"RouteTable"
             },
             "SubnetId":{
                "Ref":"PublicSubnetA"
             }
          }
       },
       "SubnetDRouteTableAssociation":{
         "Type":"AWS::EC2::SubnetRouteTableAssociation",
         "Properties":{
            "RouteTableId":{
               "Ref":"RouteTable"
            },
            "SubnetId":{
               "Ref":"PublicSubnetD"
            }
         }
      },
       "SubnetBRouteTableAssociation":{
          "Type":"AWS::EC2::SubnetRouteTableAssociation",
          "Properties":{
             "RouteTableId":{
                "Ref":"PrivateRouteTable"
             },
             "SubnetId":{
                "Ref":"PrivateSubnetB"
             }
          }
       },
       "SubnetCRouteTableAssociation":{
          "Type":"AWS::EC2::SubnetRouteTableAssociation",
          "Properties":{
             "RouteTableId":{
                "Ref":"PrivateRouteTable"
             },
             "SubnetId":{
                "Ref":"PrivateSubnetC"
             }
          }
       },
       "EC2InstanceSecurityGroup":{
          "Type":"AWS::EC2::SecurityGroup",
          "Properties":{
             "GroupDescription":"Security Group Assignment6 - csye6225",
             "GroupName":"application",
             "VpcId":{
                "Ref":"VPC"
             },
             "SecurityGroupIngress":[
                {
                   "IpProtocol":"tcp",
                   "CidrIp":"0.0.0.0/0",
                   "FromPort":"443",
                   "ToPort":"443"
                },
                {
                   "IpProtocol":"tcp",
                   "CidrIp":"0.0.0.0/0",
                   "FromPort":"80",
                   "ToPort":"80"
                },
                {
                   "IpProtocol":"tcp",
                   "CidrIp":"0.0.0.0/0",
                   "FromPort":"22",
                   "ToPort":"22"
                },
                {
                   "IpProtocol":"tcp",
                   "CidrIp":"0.0.0.0/0",
                   "FromPort":"3000",
                   "ToPort":"3000"
                }
             ]
          }
       },
       "RDSInstanceSecurityGroup":{
          "Type":"AWS::EC2::SecurityGroup",
          "Properties":{
             "GroupDescription":"RDS Security Group Assignment6 - csye6225",
             "GroupName":"database",
             "VpcId":{
                "Ref":"VPC"
             },
             "SecurityGroupIngress":[
                {
                   "IpProtocol":"tcp",
                   "SourceSecurityGroupId":{
                      "Ref":"EC2InstanceSecurityGroup"
                   },
                   "FromPort":"3306",
                   "ToPort":"3306"
                }
             ]
          }
       },
       "S3Bucket":{
          "Type":"AWS::S3::Bucket",
          "Properties":{
             "AccessControl": "Private",
             "BucketEncryption":{
                "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
             },
             "LifecycleConfiguration":{
                "Rules":[
                   {
                      "Id":"MoveToAIAfter30Days",
                      "Status":"Enabled",
                      "Transitions":[
                         {
                           "StorageClass" : "STANDARD_IA",
                           "TransitionInDays": "30"
                         }
                      ]
                   }
                ]
             }
          }
       },
       "IamPolicy":{
          "Type":"AWS::IAM::ManagedPolicy",
          "Properties":{
            "ManagedPolicyName":{
               "Ref":"EC2IamPolicy"
            },
             "PolicyDocument": {
             "Version": "2012-10-17",
             "Statement":[
                {
                   "Action":["s3:Get*","s3:Put*","s3:Delete*"],
                   "Effect":"Allow",
                   "Resource":[
                      {"Fn::Join":["",["arn:aws:s3:::",{"Ref":"S3Bucket"}]]},
                      {"Fn::Join":["",["arn:aws:s3:::",{"Ref":"S3Bucket"},"/*"]]}
                   ]
                }
             ]
            }
          }
       },
       "EC2InstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
            "Path": "/",
            "Roles": [
                {
                    "Ref": "CodeDeployIamRole"
                }
            ]
        }
    },
       "DBSubnetGroup":{
          "Type":"AWS::RDS::DBSubnetGroup",
          "Properties":{
             "DBSubnetGroupDescription":"DB Subnet Group for RDS Instance",
             "DBSubnetGroupName":"RDSSubnetGroup",
             "SubnetIds":[
                {
                   "Ref":"PrivateSubnetB"
                },
                {
                   "Ref":"PrivateSubnetC"
                }
             ],
             "Tags":[
                {
                   "Key":"Name",
                   "Value":"RDSSubnetGroup"
                }
             ]
          }
       },
       "RDSInstance":{
          "Type":"AWS::RDS::DBInstance",
          "Properties":{
             "AllocatedStorage":{
                "Ref":"RDSInstanceVol"
             },
             "DBInstanceClass":"db.t3.micro",
             "DBInstanceIdentifier":{
                "Ref":"DBInstanceId"
             },
             "VPCSecurityGroups":[
                {
                   "Ref":"RDSInstanceSecurityGroup"
                }
             ],
             "MultiAZ":"false",
             "Engine":"MySQL",
             "EngineVersion":"8.0.16",
             "MasterUsername":{
                "Ref":"DBUsername"
             },
             "MasterUserPassword":{
                "Ref":"DBPassword"
             },
             "PubliclyAccessible":{
                "Ref":"RDSPublicAccessibility"
             },
             "DBName":{
                "Ref": "RDSDBName"
             },
             "DBSubnetGroupName":{
                "Ref":"DBSubnetGroup"
             }
          }
       },
    "CCIUploadToS3Policy":{
      "Type":"AWS::IAM::ManagedPolicy",
      "Properties":{
        "ManagedPolicyName":{
           "Ref":"CCIUploadS3"
        },
         "PolicyDocument": {
         "Version": "2012-10-17",
         "Statement":[
            {
               "Action":["s3:Get*","s3:PutObject","s3:List*"],
               "Effect":"Allow",
               "Resource":[
                  {"Fn::Join":["",["arn:aws:s3:::",{"Ref":"CodeDeployBucket"}]]},
                  {"Fn::Join":["",["arn:aws:s3:::",{"Ref":"CodeDeployBucket"},"/*"]]}
               ]
            }
         ]
        },
        "Users": ["circleci"]
      }
   },
   "EC2CodeDeployS3Policy":{
      "Type":"AWS::IAM::ManagedPolicy",
      "Properties":{
        "ManagedPolicyName":{
           "Ref":"CDEC2ReadS3"
        },
         "PolicyDocument": {
         "Version": "2012-10-17",
         "Statement":[
            {
               "Action":["s3:Get*","s3:List*"],
               "Effect":"Allow",
               "Resource":[
                  {"Fn::Join":["",["arn:aws:s3:::",{"Ref":"CodeDeployBucket"}]]},
                  {"Fn::Join":["",["arn:aws:s3:::",{"Ref":"CodeDeployBucket"},"/*"]]}
               ]
            }
         ]
        }
      }
   },
   "CCICodeDeployPolicy":{
      "Type":"AWS::IAM::ManagedPolicy",
      "Properties":{
        "ManagedPolicyName":{
           "Ref":"CCICodeDeploy"
        },
        "PolicyDocument": {
         "Version": "2012-10-17",
         "Statement": [
           {
             "Effect": "Allow",
             "Action": [
               "codedeploy:RegisterApplicationRevision",
               "codedeploy:GetApplicationRevision"
             ],
             "Resource": [
               {"Fn::Join":["",["arn:aws:codedeploy:",{"Ref":"AWS::Region"},":",{"Ref":"AWSAccountID"},":application:",{"Ref":"CodeDeployAppName"}]]}
             ]
           },
           {
             "Effect": "Allow",
             "Action": [
               "codedeploy:CreateDeployment",
               "codedeploy:GetDeployment"
             ],
             "Resource": [
               "*"
             ]
           },
           {
             "Effect": "Allow",
             "Action": [
               "codedeploy:GetDeploymentConfig"
             ],
             "Resource": [
               {"Fn::Join":["",["arn:aws:codedeploy:",{"Ref":"AWS::Region"},":",{"Ref":"AWSAccountID"},":deploymentconfig:CodeDeployDefault.OneAtATime"]]},
               {"Fn::Join":["",["arn:aws:codedeploy:",{"Ref":"AWS::Region"},":",{"Ref":"AWSAccountID"},":deploymentconfig:CodeDeployDefault.HalfAtATime"]]},
               {"Fn::Join":["",["arn:aws:codedeploy:",{"Ref":"AWS::Region"},":",{"Ref":"AWSAccountID"},":deploymentconfig:CodeDeployDefault.AllAtOnce"]]}
             ]
           }
         ]
       },
       "Users": ["circleci"]
      }
   },
   "CodeDeployIamRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
         "AssumeRolePolicyDocument":
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": ["sts:AssumeRole"]
                    }
                ]
            },
         "ManagedPolicyArns":[{"Ref" : "EC2CodeDeployS3Policy"},{"Ref" : "IamPolicy"},"arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"],
         "Description":"Iam Role to host web application in EC2",
         "RoleName":{
            "Ref":"EC2CodeDeployRole"
         }
      }
   },
   "CodeDeployServiceRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
         "AssumeRolePolicyDocument":
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "codedeploy.amazonaws.com"
                            ]
                        },
                        "Action": ["sts:AssumeRole"]
                    }
                ]
            },
         "ManagedPolicyArns":["arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"],
         "Description":"Iam Role to host web application in EC2",
         "RoleName":{
            "Ref":"ServiceCodeDeployRole"
         }
      }
   },
   "CodeDeployApp":{
      "Type" : "AWS::CodeDeploy::Application",
      "Properties" : {
         "ApplicationName" : {
            "Ref": "CodeDeployAppName"
         },
         "ComputePlatform" : "Server"
      }

   },
   "CodeDeploymentgroup":{
      "Type" : "AWS::CodeDeploy::DeploymentGroup",
      "Properties" : {
         "ApplicationName" : {
            "Ref":"CodeDeployApp"
         },
         "AutoRollbackConfiguration" : { 
               "Enabled" : "true",
               "Events": ["DEPLOYMENT_FAILURE"]
         },
         "ServiceRoleArn": {
            "Fn::GetAtt": [
              "CodeDeployServiceRole",
               "Arn"
            ]
          },
         "DeploymentConfigName" : "CodeDeployDefault.OneAtATime",
         "DeploymentGroupName" : {
            "Ref":"CodeDeployGroupName"
         },
         "DeploymentStyle" : {
            "DeploymentOption": "WITH_TRAFFIC_CONTROL",
            "DeploymentType" : "IN_PLACE"
         },
         "Ec2TagFilters" : [
                     {
                     "Key" : "Name",
                     "Type" : "KEY_AND_VALUE",
                     "Value" : "WebAppInstance"
                     }
            ],
            "AutoScalingGroups" : [{"Ref":"autoScalingGroup"}],
            "LoadBalancerInfo":
               {
                  "TargetGroupInfoList" : [ {"Name":"webAppEC2TargetGroup"}]
               }
         }

       },
       "autoScalingLaunchConfig":{
         "Type" : "AWS::AutoScaling::LaunchConfiguration",
         "Properties" : {
            "AssociatePublicIpAddress" : "true",
            "BlockDeviceMappings":[
               {
                  "DeviceName":"/dev/sda1",
                  "Ebs":{
                     "DeleteOnTermination":"true",
                     "VolumeSize":{
                        "Ref":"EC2InstanceVol"
                     },
                     "VolumeType":"gp2"
                  }
               }
            ],
            "IamInstanceProfile":{
               "Ref":"EC2InstanceProfile"
            },
            "ImageId":{
               "Ref":"AMIImage"
            },
            "InstanceMonitoring" : "false",
            "InstanceType":"t2.micro",
            "KeyName":"awswork",
            "LaunchConfigurationName" : {
               "Ref":"LaunchconfigName"
            },
            "SecurityGroups":[
               {
                  "Ref":"EC2InstanceSecurityGroup"
               }
            ],
            "UserData":{
               "Fn::Base64":{
                  "Fn::Join":[
                     "",
                     [  
                       "#!/bin/bash -xe \n",
                       "echo '#!/bin/sh' >> myvariables.sh \n",
                       "cd /home/ubuntu \n",
                       {"Fn::Join": ["",
                          ["sudo echo ","'", "export MYSQL_USERNAME=","\"",{"Ref": "DBUsername"},"\"","'"," >> /etc/environment \n" ]]
                       },
                       {"Fn::Join": ["",
                       ["sudo echo ","'", "export MYSQL_ROOT_PASSWORD=","\"",{"Ref":"DBPassword"},"\"","'"," >> /etc/environment \n" ]]
                       },
                       {"Fn::Join": ["",
                          ["sudo echo ","'", "export MYSQL_DATABASE=","\"",{"Ref":"RDSDBName"},"\"","'"," >> /etc/environment \n" ]]
                       },
                       {"Fn::Join": ["",
                             ["sudo echo ","'", "export MYSQL_HOST=","\"",{"Fn::GetAtt": ["RDSInstance","Endpoint.Address"]},"\"","'"," >> /etc/environment \n" ]]
                       },
                       {"Fn::Join": ["",
                           ["sudo echo ","'", "export BucketName=","\"",{"Ref": "S3Bucket"},"\"","'"," >> /etc/environment \n"]]
                       },
                        "sudo echo 'export MYSQL_DIALECT=\"mysql\"' >> /etc/environment \n",
                        "sudo echo 'export NODE_ENV=\"test\"' >> /etc/environment \n",
                        "sudo echo 'export MYSQL_PORT=\"3306\"' >> /etc/environment \n",
                        "sudo apt install unzip\n"
                     ]
                  ]
               }
            }
         }
      },
      "autoScalingGroup":{
         "Type" : "AWS::AutoScaling::AutoScalingGroup",
         "Properties" : {
            "AutoScalingGroupName" : "WebAppAutoScalingGroup",
            "Cooldown" : "300",
            "DesiredCapacity" : "2",
            "LaunchConfigurationName":{
               "Ref": "autoScalingLaunchConfig"
            },
            "MaxSize":"5",
            "MinSize":"2",
            "Tags":[{
               "Key" : "Name",
               "PropagateAtLaunch" : "true",
               "Value" : "WebAppInstance"
            }],
            "VPCZoneIdentifier":[
               {"Ref":"PublicSubnetA"}, 
               {"Ref":"PublicSubnetD"}],
            "TargetGroupARNs" : [{"Ref": "LoadBalancerTargetGroup"}]
         }
      },
      "WebServerScaleUpPolicy": {
         "Type": "AWS::AutoScaling::ScalingPolicy",
         "Properties": {
           "AdjustmentType": "ChangeInCapacity",
           "AutoScalingGroupName": {
             "Ref": "autoScalingGroup"
           },
           "Cooldown": "300",
           "ScalingAdjustment": "1"
         }
       },
       "WebServerScaleDownPolicy": {
         "Type": "AWS::AutoScaling::ScalingPolicy",
         "Properties": {
           "AdjustmentType": "ChangeInCapacity",
           "AutoScalingGroupName": {
             "Ref": "autoScalingGroup"
           },
           "Cooldown": "300",
           "ScalingAdjustment": "-1"
         }
       },
       "CPUAlarmHigh": {
         "Type": "AWS::CloudWatch::Alarm",
         "Properties": {
            "AlarmDescription": "Scale-up if CPU > 5% for 1 minutes",
            "MetricName": "CPUUtilization",
            "Namespace": "AWS/EC2",
            "Statistic": "Average",
            "Period": "300",
            "EvaluationPeriods": "1",
            "Threshold": "5",
            "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
            "ComparisonOperator": "GreaterThanThreshold",
            "Dimensions": [ {
               "Name": "AutoScalingGroupName",
               "Value": { "Ref": "autoScalingGroup" }
            } ] 
         }
      },
      "CPUAlarmLow": {
        "Type": "AWS::CloudWatch::Alarm",
        "Properties": {
          "AlarmDescription": "Scale-down if CPU < 3% for 1 minutes",
          "MetricName": "CPUUtilization",
          "Namespace": "AWS/EC2",
          "Statistic": "Average",
          "Period": "300",
          "EvaluationPeriods": "1",
          "Threshold": "3",
          "AlarmActions": [{"Ref": "WebServerScaleDownPolicy"}],
          "ComparisonOperator": "LessThanThreshold",
          "Dimensions": [{
              "Name": "AutoScalingGroupName",
              "Value": {"Ref": "autoScalingGroup"}
            }]
        }
      },
      "LoadBalancer":{
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties" : {
                "IpAddressType" : "ipv4",
                "Name" : "webAppLoadBalancer",
                "Scheme" : "internet-facing",
                "Subnets" : [ 
                   {"Ref":"PublicSubnetA"},
                   {"Ref":"PublicSubnetD"}  
                 ],
                 "SecurityGroups" : [ {
                    "Ref":"EC2InstanceSecurityGroup"
                 }],
                "Tags" : [ {
                  "Key" : "Name",
                  "Value" : "LoadBalancerEC2"
                }],
                "Type" : "application"
              }
          },
      "LoadBalancerTargetGroup":{
         "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
         "Properties" : {
            "HealthCheckEnabled":"true",
            "HealthCheckIntervalSeconds":"20",
            "HealthyThresholdCount" : "2",
            "UnhealthyThresholdCount" : "2",
            "HealthCheckTimeoutSeconds" : "5",
            "Name" : "webAppEC2TargetGroup",
            "Port" : "3000",
            "Protocol" : "HTTP",
            "Tags" : [{
               "Key" : "Name",
               "Value" : "webAppTargetGroup"
             }],
            "TargetType" : "instance",
            "VpcId" : {
                "Ref":"VPC"
             },
            "TargetGroupAttributes":[{
               "Key" : "deregistration_delay.timeout_seconds",
               "Value" : "30"
             }]
           }
       },
       "LoadBalancerListener":{
         "Type" : "AWS::ElasticLoadBalancingV2::Listener",
         "Properties" : {
             "DefaultActions" : [{
               "TargetGroupArn" : {
                  "Fn::Join":["",["arn:aws:elasticloadbalancing:",{"Ref":"AWS::Region"},":",{"Ref":"AWSAccountID"},":",{"Fn::GetAtt" : ["LoadBalancerTargetGroup", "TargetGroupFullName"]}]]
               },
               "Type" : "forward"
             }],
             "LoadBalancerArn" : {"Fn::Join":["",["arn:aws:elasticloadbalancing:",{"Ref":"AWS::Region"},":",{"Ref":"AWSAccountID"},":loadbalancer/",{"Fn::GetAtt" : ["LoadBalancer", "LoadBalancerFullName"]}]]},
             "Port" : "80",
             "Protocol" : "HTTP"
           }
       },
       "Route53DNS":{
         "Type" : "AWS::Route53::RecordSet",
         "Properties" : {
             "AliasTarget" : {
                  "DNSName" : {"Fn::GetAtt" : ["LoadBalancer", "DNSName"]},
                  "EvaluateTargetHealth" : "false",
                  "HostedZoneId" : {"Fn::GetAtt" : ["LoadBalancer", "CanonicalHostedZoneID"]}
             },
             "HostedZoneId" : {
                "Ref":"HostedZoneIdR53"
             },
             "Name" : {"Ref":"FinalDNSName"},
             "Type" : "A"
           }
       }
   },
    "Outputs":{
       "VPC":{
          "Description":"Newly Created VPC",
          "Value":{
             "Ref":"VPC"
          }
       },
      "RDS":{
         "Description":"Newly Created VPC",
         "Value":{
            "Ref":"RDSInstance"
         }  
      },
       "InternetGateway":{
          "Description":"Internet Gateway Associated",
          "Value":{
             "Ref":"InternetGateway"
          }
       }
    }
}